package tt.vis;import java.awt.BasicStroke;import java.awt.Color;import java.awt.Graphics2D;import java.util.Collection;import javax.vecmath.Point2d;import cz.agents.alite.vis.Vis;import cz.agents.alite.vis.layer.AbstractLayer;import cz.agents.alite.vis.layer.VisLayer;public class LabeledCircleLayer<P> extends AbstractLayer {    static public class LabeledCircle<PP> {        PP center;        int radius;        String label;        Color edgeColor;        Color textColor;        Color fillColor;                public LabeledCircle(PP center, int radius, String label, Color color) {            super();            this.center = center;            this.radius = radius;            this.label = label;            this.edgeColor = color;            this.fillColor = null;            this.textColor = color;        }                public LabeledCircle(PP center, int radius, String label, Color edgeColor, Color fillColor, Color textColor) {            super();            this.center = center;            this.radius = radius;            this.label = label;            this.edgeColor = edgeColor;            this.fillColor = fillColor;            this.textColor = textColor;        }    }    static public interface LabeledCircleProvider<PP> {        Collection<LabeledCircle<PP>> getLabeledCircles();    }    LabeledCircleProvider<P> provider;    private ProjectionTo2d<P> projection;    LabeledCircleLayer(LabeledCircleProvider<P> pointProvider, ProjectionTo2d<P> projection) {        this.provider = pointProvider;        this.projection = projection;    }    @Override    public void paint(Graphics2D canvas) {        canvas.setStroke(new BasicStroke(1));        for (LabeledCircle<P> circle: provider.getLabeledCircles()) {        	Point2d point2d = projection.project(circle.center);        	int radius = Vis.transW(circle.radius);        	        	if (circle.fillColor != null) {        		canvas.setColor(circle.fillColor);        		canvas.fillOval(Vis.transX(point2d.x)-radius, Vis.transY(point2d.y)-radius, radius*2, radius*2);        	}        	            canvas.setColor(circle.edgeColor);            canvas.drawOval(Vis.transX(point2d.x)-radius, Vis.transY(point2d.y)-radius, radius*2, radius*2);                        String label = circle.label;            int labelWidth = (int)  canvas.getFontMetrics().getStringBounds(label, canvas).getWidth();              int labelHeight = (int)  canvas.getFontMetrics().getStringBounds(label, canvas).getHeight();              int x = Vis.transX(point2d.x) - labelWidth/2;            int y = Vis.transY(point2d.y) + labelHeight/2;                        canvas.setColor(circle.textColor);            int i = 0;            for (String line : circle.label.split("\n")) {               canvas.drawString(line, x, y + (i * canvas.getFontMetrics().getHeight()));               i++;            }        }    }    @Override    public String getLayerDescription() {        String description = "Layer shows points and labels associated to them.";        return buildLayersDescription(description);    }    public static <P> VisLayer create(LabeledCircleProvider<P> pointProvider, ProjectionTo2d<P> projection) {        return new LabeledCircleLayer<P>(pointProvider, projection);    }}